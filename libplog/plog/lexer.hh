/* Generated by re2c 0.15.3 on Sat Nov 26 15:23:48 2016 */
#line 1 "lexer.xch"
// {{{ GPL License

// This file is part of gringo - a grounder for logic programs.
// Copyright (C) 2013  Roland Kaminski

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// }}}

#include <gringo/locatable.hh>
#include "plogparser.h"

#define YYCTYPE     char
#define YYCURSOR    cursor()
#define YYLIMIT     limit()
#define YYMARKER    marker()
#define YYFILL(n)   {fill(n);}
#define YYCTXMARKER ctxmarker()
#define YYGETCONDITION condition
#define YYSETCONDITION condition



// settings: continue executing the loop when the condiiton is switched, e.g,
// in       <normal,theory,definition> "%"        :=> comment

#line 40 "lexer.xch"

//
// definitions:
#line 57 "lexer.xch"


using Location = Gringo::Location;

int PlogParser::lex_impl(void *pValue, Location &loc) {
    int bc = 0;
    auto &value = *static_cast<PlogGrammar::parser::semantic_type*>(pValue);
    start(loc);
    for (;;) {
        
#line 56 "<stdout>"
{
	YYCTYPE yych;
	switch (YYGETCONDITION()) {
	case yycnormal: goto yyc_normal;
	case yycblockcomment: goto yyc_blockcomment;
	case yyccomment: goto yyc_comment;
	}
/* *********************************** */
yyc_blockcomment:
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	switch (yych) {
	case '\n':	goto yy7;
	case '%':	goto yy5;
	case '*':	goto yy3;
	default:	goto yy9;
	}
yy3:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '%':	goto yy12;
	default:	goto yy4;
	}
yy4:
#line 117 "lexer.xch"
	{ continue; }
#line 83 "<stdout>"
yy5:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '*':	goto yy10;
	default:	goto yy6;
	}
yy6:
	YYSETCONDITION(yyccomment);
	continue;
yy7:
	++YYCURSOR;
#line 116 "lexer.xch"
	{ if(eof()) { lexerError("<EOF>"); return 0; } step(); continue; }
#line 97 "<stdout>"
yy9:
	yych = *++YYCURSOR;
	goto yy4;
yy10:
	++YYCURSOR;
#line 114 "lexer.xch"
	{ bc++; continue; }
#line 105 "<stdout>"
yy12:
	++YYCURSOR;
#line 113 "lexer.xch"
	{ if(--bc == 0) { condition(yycnormal); start(loc); } continue; }
#line 110 "<stdout>"
/* *********************************** */
yyc_comment:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case '\n':	goto yy16;
	default:	goto yy18;
	}
yy16:
	++YYCURSOR;
#line 119 "lexer.xch"
	{
            if(eof()) {
                if(bc > 0) { lexerError("<EOF>"); }
                return 0;
            }
            step();
            if (bc > 0) { condition(yycblockcomment); }
            else {
                condition(yycnormal);
                start(loc);
            }
            continue;
        }
#line 135 "<stdout>"
yy18:
	++YYCURSOR;
#line 132 "lexer.xch"
	{ continue; }
#line 140 "<stdout>"
/* *********************************** */
yyc_normal:
	if ((YYLIMIT - YYCURSOR) < 11) YYFILL(11);
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\r':
	case ' ':	goto yy23;
	case '\n':	goto yy26;
	case '!':	goto yy75;
	case '#':	goto yy28;
	case '%':	goto yy80;
	case '&':	goto yy65;
	case '(':	goto yy53;
	case ')':	goto yy55;
	case '*':	goto yy63;
	case '+':	goto yy61;
	case ',':	goto yy45;
	case '-':	goto yy41;
	case '.':	goto yy39;
	case '/':	goto yy76;
	case '0':	goto yy34;
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy36;
	case ':':	goto yy43;
	case '<':	goto yy71;
	case '=':	goto yy73;
	case '>':	goto yy69;
	case '?':	goto yy78;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy37;
	case '[':	goto yy49;
	case '\\':	goto yy67;
	case ']':	goto yy51;
	case 'a':	goto yy32;
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'o':
	case 'q':
	case 'r':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy33;
	case 'n':	goto yy30;
	case 'p':	goto yy24;
	case 's':	goto yy31;
	case '{':	goto yy57;
	case '|':	goto yy47;
	case '}':	goto yy59;
	default:	goto yy82;
	}
yy22:
#line 67 "lexer.xch"
	{ start(loc); continue; }
#line 240 "<stdout>"
yy23:
	yych = *++YYCURSOR;
	goto yy151;
yy24:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'r':	goto yy148;
	default:	goto yy108;
	}
yy25:
#line 76 "lexer.xch"
	{ value.str = String::toRep(string()); return PlogGrammar::parser::token::IDENTIFIER; }
#line 253 "<stdout>"
yy26:
	++YYCURSOR;
#line 69 "lexer.xch"
	{ if(eof()) return 0; step(); start(loc); continue; }
#line 258 "<stdout>"
yy28:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '!':	goto yy137;
	case 'a':
	case 'b':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy139;
	case 'c':	goto yy142;
	default:	goto yy29;
	}
yy29:
#line 111 "lexer.xch"
	{ lexerError( std::string(string().first, string().first + string().size)); continue; }
#line 294 "<stdout>"
yy30:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy134;
	default:	goto yy108;
	}
yy31:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy119;
	case 't':	goto yy120;
	default:	goto yy108;
	}
yy32:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy109;
	default:	goto yy108;
	}
yy33:
	yych = *++YYCURSOR;
	goto yy108;
yy34:
	++YYCURSOR;
yy35:
#line 77 "lexer.xch"
	{ value.num = integer(); return PlogGrammar::parser::token::NUMBER; }
#line 322 "<stdout>"
yy36:
	yych = *++YYCURSOR;
	goto yy106;
yy37:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy104;
yy38:
#line 78 "lexer.xch"
	{ value.str = String::toRep(string()); return PlogGrammar::parser::token::VARIABLE; }
#line 333 "<stdout>"
yy39:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '.':	goto yy101;
	default:	goto yy40;
	}
yy40:
#line 81 "lexer.xch"
	{ return PlogGrammar::parser::token::DOT; }
#line 343 "<stdout>"
yy41:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '>':	goto yy99;
	default:	goto yy42;
	}
yy42:
#line 93 "lexer.xch"
	{ return PlogGrammar::parser::token::SUB; }
#line 353 "<stdout>"
yy43:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '-':	goto yy97;
	default:	goto yy44;
	}
yy44:
#line 82 "lexer.xch"
	{ return PlogGrammar::parser::token::COLON; }
#line 363 "<stdout>"
yy45:
	++YYCURSOR;
#line 84 "lexer.xch"
	{ return PlogGrammar::parser::token::COMMA; }
#line 368 "<stdout>"
yy47:
	++YYCURSOR;
#line 85 "lexer.xch"
	{ return PlogGrammar::parser::token::VBAR; }
#line 373 "<stdout>"
yy49:
	++YYCURSOR;
#line 86 "lexer.xch"
	{ return PlogGrammar::parser::token::LBRACK; }
#line 378 "<stdout>"
yy51:
	++YYCURSOR;
#line 87 "lexer.xch"
	{ return PlogGrammar::parser::token::RBRACK; }
#line 383 "<stdout>"
yy53:
	++YYCURSOR;
#line 88 "lexer.xch"
	{ return PlogGrammar::parser::token::LPAREN; }
#line 388 "<stdout>"
yy55:
	++YYCURSOR;
#line 89 "lexer.xch"
	{ return PlogGrammar::parser::token::RPAREN; }
#line 393 "<stdout>"
yy57:
	++YYCURSOR;
#line 90 "lexer.xch"
	{ return PlogGrammar::parser::token::LBRACE; }
#line 398 "<stdout>"
yy59:
	++YYCURSOR;
#line 91 "lexer.xch"
	{ return PlogGrammar::parser::token::RBRACE; }
#line 403 "<stdout>"
yy61:
	++YYCURSOR;
#line 92 "lexer.xch"
	{ return PlogGrammar::parser::token::ADD; }
#line 408 "<stdout>"
yy63:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '*':	goto yy95;
	default:	goto yy64;
	}
yy64:
#line 97 "lexer.xch"
	{ return PlogGrammar::parser::token::MUL; }
#line 418 "<stdout>"
yy65:
	++YYCURSOR;
#line 95 "lexer.xch"
	{ return PlogGrammar::parser::token::AND; }
#line 423 "<stdout>"
yy67:
	++YYCURSOR;
#line 96 "lexer.xch"
	{ return PlogGrammar::parser::token::MOD; }
#line 428 "<stdout>"
yy69:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '=':	goto yy93;
	default:	goto yy70;
	}
yy70:
#line 98 "lexer.xch"
	{ return PlogGrammar::parser::token::GT; }
#line 438 "<stdout>"
yy71:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '=':	goto yy91;
	case '>':	goto yy89;
	default:	goto yy72;
	}
yy72:
#line 99 "lexer.xch"
	{ return PlogGrammar::parser::token::LT; }
#line 449 "<stdout>"
yy73:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '=':	goto yy87;
	default:	goto yy74;
	}
yy74:
#line 105 "lexer.xch"
	{ return PlogGrammar::parser::token::EQ; }
#line 459 "<stdout>"
yy75:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=':	goto yy85;
	default:	goto yy29;
	}
yy76:
	++YYCURSOR;
#line 106 "lexer.xch"
	{ return PlogGrammar::parser::token::SLASH; }
#line 470 "<stdout>"
yy78:
	++YYCURSOR;
#line 107 "lexer.xch"
	{ return PlogGrammar::parser::token::QUESTION; }
#line 475 "<stdout>"
yy80:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '*':	goto yy83;
	default:	goto yy81;
	}
yy81:
	YYSETCONDITION(yyccomment);
	continue;
yy82:
	yych = *++YYCURSOR;
	goto yy29;
yy83:
	++YYCURSOR;
	YYSETCONDITION(yycblockcomment);
#line 108 "lexer.xch"
	{ bc++; continue; }
#line 493 "<stdout>"
yy85:
	++YYCURSOR;
#line 103 "lexer.xch"
	{ return PlogGrammar::parser::token::NEQ; }
#line 498 "<stdout>"
yy87:
	++YYCURSOR;
#line 102 "lexer.xch"
	{ return PlogGrammar::parser::token::EQ; }
#line 503 "<stdout>"
yy89:
	++YYCURSOR;
#line 104 "lexer.xch"
	{ return PlogGrammar::parser::token::NEQ; }
#line 508 "<stdout>"
yy91:
	++YYCURSOR;
#line 101 "lexer.xch"
	{ return PlogGrammar::parser::token::LEQ; }
#line 513 "<stdout>"
yy93:
	++YYCURSOR;
#line 100 "lexer.xch"
	{ return PlogGrammar::parser::token::GEQ; }
#line 518 "<stdout>"
yy95:
	++YYCURSOR;
#line 94 "lexer.xch"
	{ return PlogGrammar::parser::token::POW; }
#line 523 "<stdout>"
yy97:
	++YYCURSOR;
#line 83 "lexer.xch"
	{ return PlogGrammar::parser::token::IF; }
#line 528 "<stdout>"
yy99:
	++YYCURSOR;
#line 80 "lexer.xch"
	{ return PlogGrammar::parser::token::ARROW; }
#line 533 "<stdout>"
yy101:
	++YYCURSOR;
#line 79 "lexer.xch"
	{ return PlogGrammar::parser::token::DOTS; }
#line 538 "<stdout>"
yy103:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy104:
	switch (yych) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy103;
	default:	goto yy38;
	}
yy105:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy106:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy105;
	default:	goto yy35;
	}
yy107:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy108:
	switch (yych) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy107;
	default:	goto yy25;
	}
yy109:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy110;
	default:	goto yy108;
	}
yy110:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r':	goto yy111;
	default:	goto yy108;
	}
yy111:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i':	goto yy112;
	default:	goto yy108;
	}
yy112:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'b':	goto yy113;
	default:	goto yy108;
	}
yy113:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'u':	goto yy114;
	default:	goto yy108;
	}
yy114:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy115;
	default:	goto yy108;
	}
yy115:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy116;
	default:	goto yy108;
	}
yy116:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy117;
	default:	goto yy108;
	}
yy117:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy107;
	default:	goto yy118;
	}
yy118:
#line 74 "lexer.xch"
	{ return PlogGrammar::parser::token:: ATTDEFKEYWORD; }
#line 821 "<stdout>"
yy119:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r':	goto yy130;
	default:	goto yy108;
	}
yy120:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a':	goto yy121;
	default:	goto yy108;
	}
yy121:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy122;
	default:	goto yy108;
	}
yy122:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy123;
	default:	goto yy108;
	}
yy123:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'm':	goto yy124;
	default:	goto yy108;
	}
yy124:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy125;
	default:	goto yy108;
	}
yy125:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n':	goto yy126;
	default:	goto yy108;
	}
yy126:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy127;
	default:	goto yy108;
	}
yy127:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy128;
	default:	goto yy108;
	}
yy128:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy107;
	default:	goto yy129;
	}
yy129:
#line 75 "lexer.xch"
	{ return PlogGrammar::parser::token:: STMTDEFKEYWORD; }
#line 948 "<stdout>"
yy130:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy131;
	default:	goto yy108;
	}
yy131:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy132;
	default:	goto yy108;
	}
yy132:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy107;
	default:	goto yy133;
	}
yy133:
#line 73 "lexer.xch"
	{return PlogGrammar::parser::token::SORTDEFKEYWORD; }
#line 1033 "<stdout>"
yy134:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy135;
	default:	goto yy108;
	}
yy135:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy107;
	default:	goto yy136;
	}
yy136:
#line 72 "lexer.xch"
	{ value.str = String::toRep(not_); return PlogGrammar::parser::token::NOT; }
#line 1112 "<stdout>"
yy137:
	++YYCURSOR;
	YYSETCONDITION(yyccomment);
	continue;
yy139:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy140:
	switch (yych) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy139;
	default:	goto yy141;
	}
yy141:
#line 71 "lexer.xch"
	{ value.str = String::toRep(string(1)); return PlogGrammar::parser::token::SORT_NAME; }
#line 1192 "<stdout>"
yy142:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy143;
	default:	goto yy140;
	}
yy143:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n':	goto yy144;
	default:	goto yy140;
	}
yy144:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy145;
	default:	goto yy140;
	}
yy145:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy146;
	default:	goto yy140;
	}
yy146:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy139;
	default:	goto yy147;
	}
yy147:
#line 70 "lexer.xch"
	{ return PlogGrammar::parser::token::CONST; }
#line 1289 "<stdout>"
yy148:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '\'':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy107;
	default:	goto yy149;
	}
yy149:
#line 68 "lexer.xch"
	{ return PlogGrammar::parser::token::PR; }
#line 1362 "<stdout>"
yy150:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy151:
	switch (yych) {
	case '\t':
	case '\r':
	case ' ':	goto yy150;
	default:	goto yy22;
	}
}
#line 133 "lexer.xch"

    }
    assert(false);
    return 0;
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL
#undef YYCTXMARKER
#undef YYGETCONDITION
#undef YYSETCONDITION
