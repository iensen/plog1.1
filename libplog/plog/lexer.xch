// {{{ GPL License

// This file is part of gringo - a grounder for logic programs.
// Copyright (C) 2013  Roland Kaminski

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// }}}

#include <gringo/locatable.hh>
#include "plogparser.h"

#define YYCTYPE     char
#define YYCURSOR    cursor()
#define YYLIMIT     limit()
#define YYMARKER    marker()
#define YYFILL(n)   {fill(n);}
#define YYCTXMARKER ctxmarker()
#define YYGETCONDITION condition
#define YYSETCONDITION condition



// settings: continue executing the loop when the condiiton is switched, e.g,
// in       <normal,theory,definition> "%"        :=> comment

/*!re2c
    re2c:cond:goto = "continue;";
*/
//
// definitions:
/*!re2c
    NUMBER     = "0"|([1-9][0-9]*);
    WS         = [\t\r ]*;
    NL         = "\n";
    VARIABLE   = [A-Z]['A-Za-z0-9_]*;
    WSNL       = [\t\r\n ]*;
    CONSTDIRECTIVE = "#const";
    SORTDEFKEYWORD = "sorts";
    ATTDEFKEYWORD = "attributes";
    STMTDEFKEYWORD = "statements";
    IDENTIFIER = [a-z]['A-Za-z0-9_]*;
    ANY        = [\000-\377];


*/

using Location = Gringo::Location;

int PlogParser::lex_impl(void *pValue, Location &loc) {
    int bc = 0;
    auto &value = *static_cast<PlogGrammar::parser::semantic_type*>(pValue);
    start(loc);
    for (;;) {
        /*!re2c
        <normal> WS         { start(loc); continue; }
        <normal> "pr"                         { return PlogGrammar::parser::token::PR; }
        <normal> NL         { if(eof()) return 0; step(); start(loc); continue; }
        <normal> "#const"                     { return PlogGrammar::parser::token::CONST; }
        <normal> "#"IDENTIFIER                { value.str = String::toRep(string(1)); return PlogGrammar::parser::token::SORT_NAME; }
        <normal> "not"                        { value.str = String::toRep(not_); return PlogGrammar::parser::token::NOT; }
        <normal> SORTDEFKEYWORD {return PlogGrammar::parser::token::SORTDEFKEYWORD; }
        <normal> ATTDEFKEYWORD { return PlogGrammar::parser::token:: ATTDEFKEYWORD; }
        <normal> STMTDEFKEYWORD { return PlogGrammar::parser::token:: STMTDEFKEYWORD; }
        <normal> IDENTIFIER { value.str = String::toRep(string()); return PlogGrammar::parser::token::IDENTIFIER; }
        <normal> NUMBER     { value.num = integer(); return PlogGrammar::parser::token::NUMBER; }
        <normal> VARIABLE              { value.str = String::toRep(string()); return PlogGrammar::parser::token::VARIABLE; }
        <normal> ".."                         { return PlogGrammar::parser::token::DOTS; }
        <normal> "->"                         { return PlogGrammar::parser::token::ARROW; }
        <normal> "."        { return PlogGrammar::parser::token::DOT; }
        <normal> ":"        { return PlogGrammar::parser::token::COLON; }
        <normal> ":-"                  { return PlogGrammar::parser::token::IF; }
        <normal> ","        { return PlogGrammar::parser::token::COMMA; }
        <normal> "|"                          { return PlogGrammar::parser::token::VBAR; }
        <normal> "["                   { return PlogGrammar::parser::token::LBRACK; }
        <normal> "]"                   { return PlogGrammar::parser::token::RBRACK; }
        <normal> "("                   { return PlogGrammar::parser::token::LPAREN; }
        <normal> ")"                   { return PlogGrammar::parser::token::RPAREN; }
        <normal> "{"        { return PlogGrammar::parser::token::LBRACE; }
        <normal> "}"        { return PlogGrammar::parser::token::RBRACE; }
        <normal> "+"                          { return PlogGrammar::parser::token::ADD; }
        <normal> "-"                          { return PlogGrammar::parser::token::SUB; }
        <normal> "**"                         { return PlogGrammar::parser::token::POW; }
        <normal> "&"                         { return PlogGrammar::parser::token::AND; }
        <normal> "\\"                         { return PlogGrammar::parser::token::MOD; }
        <normal> "*"                          { return PlogGrammar::parser::token::MUL; }
        <normal> ">"                          { return PlogGrammar::parser::token::GT; }
        <normal> "<"                          { return PlogGrammar::parser::token::LT; }
        <normal> ">="                         { return PlogGrammar::parser::token::GEQ; }
        <normal> "<="                         { return PlogGrammar::parser::token::LEQ; }
        <normal> "=="                         { return PlogGrammar::parser::token::EQ; }
        <normal> "!="                         { return PlogGrammar::parser::token::NEQ; }
        <normal> "<>"                         { return PlogGrammar::parser::token::NEQ; }
        <normal> "="                          { return PlogGrammar::parser::token::EQ; }
        <normal> "/"               { return PlogGrammar::parser::token::SLASH; }
        <normal> "?"                          { return PlogGrammar::parser::token::QUESTION; }
        <normal> "%*"       => blockcomment { bc++; continue; }
        <normal> "%"        :=> comment
        <normal> "#!"       :=> comment
        <normal> ANY        { lexerError( std::string(string().first, string().first + string().size)); continue; }

        <blockcomment> "*%" { if(--bc == 0) { condition(yycnormal); start(loc); } continue; }
        <blockcomment> "%*" { bc++; continue; }
        <blockcomment> "%"  :=> comment
        <blockcomment> NL   { if(eof()) { lexerError("<EOF>"); return 0; } step(); continue; }
        <blockcomment> ANY  { continue; }

        <comment> NL {
            if(eof()) {
                if(bc > 0) { lexerError("<EOF>"); }
                return 0;
            }
            step();
            if (bc > 0) { condition(yycblockcomment); }
            else {
                condition(yycnormal);
                start(loc);
            }
            continue;
        }
        <comment> ANY { continue; }
        */
    }
    assert(false);
    return 0;
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL
#undef YYCTXMARKER
#undef YYGETCONDITION
#undef YYSETCONDITION
